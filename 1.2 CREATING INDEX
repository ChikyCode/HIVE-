An Index acts as a reference to the records. Instead of searching all the records, we can refer to the index to search for a
particular record. Indexes maintain the reference of the records. So that it is easy to search for a record with minimum overhead.
Indexes also speed up the searching of dataAn Index acts as a reference to the records. Instead of searching all the records, 
we can refer to the index to search for a particular record. Indexes maintain the reference of the records.
So that it is easy to search for a record with minimum overhead. Indexes also speed up the searching of data
 
Indexing can be use under the following circumstances:

1.If the dataset is very large.
2.If the query execution is more amount of time than you expected.
3.If a speedy query execution is required.
4.When building a data model.

Indexes are maintained in a separate table in Hive so that it won’t affect the data inside the table, 
which contains the data. Another major advantage for indexing in Hive is that indexes can also be partitioned depending 
on the size of the data we have.

The goal of Hive indexing is to improve the speed of query lookup on certain columns of a table. 
Without an index, queries with predicates like 'WHERE tab1.col1 = 10' load the entire table or partition and process all the rows. 
But if an index exists for col1, then only a portion of the file needs to be loaded and processed.

The improvement in query speed that an index can provide comes at the cost of additional processing to create the index and
disk space to store the index.(index data stored in another table)



Versions
-------------------------------------------------------------------------------------
Hive indexing was added in version 0.7.0, and bitmap indexing was added in version 0.8.0.

Compact indexing stores the pair of indexed column’s value and its blockid.
Bitmap indexing stores the combination of indexed column value and list of rows as a bitmap.

CREATING INDEXES ON HIVE TABLES
---------------------------------------------------------
hive> CREATE INDEX <indexname> ON TABLE <tablename>(<columnname>)
      AS 'COMPACT' WITH DEFERRED REBUILD;
OK
Time taken: 0.47 seconds

NOTE:
(A) the keywords WITH DEFERRED REBUILD instructs Hive to first create an empty index; 
Step(B) is where you actually build the index with the ALTER INDEX … REBUILD command. 
Deferred index builds can be very useful in workflows where one process creates the tables and indexes, 
another loads the data and builds the indexes and a final process performs data analysis

The following are the different operations that can be performed on Hive indexes:

Creating index
Showing index
Alter index
Dropping index

SHOW INDEXES ON HIVE TABLES
----------------------------------------------------------
hive> SHOW INDEXES on empnew;


DROP INDEXES ON HIVE TABLES
----------------------------------------------------------
hive> DROP INDEX ageindex ON empnew;


