 Hive Mapside Join 
--------------------------------------------------------------

Map-side Joins allows a table to get loaded into memory ensuring a very fast join operation, 
performed entirely within a mapper and that too without having to use both map and reduce phases.

Dataset description of the first dataset is as follows:
id,first_name,last_name,email,gender,ip_address

Dataset description of the second dataset is as follows:
id,first_name,last_name

CREATE TABLE IF NOT EXISTS dataset1(eid int, first_name String, last_name String,
email String, gender String, ip_address String)
row format delimited
fields terminated BY ','
tblproperties("skip.header.line.count"="1");

CREATE TABLE IF NOT EXISTS dataset2(eid int, first_name String, last_name String)
row format delimited
fields terminated BY ','
tblproperties("skip.header.line.count"="1");

-----------------------------------------------------------------
setting some property 

 By specifying the keyword, /*+ MAPJOIN(b) */ in the join statement.
 hive.auto.convert.join=true []
 hive.mapjoin.smalltable.filesize=(default it will be 25MB)

As it is a Map-side join, the number of reducers will be set to 0 automatically. 
-----------------------------------------------------------------
 
SELECT /*+ MAPJOIN(dataset2) */ dataset1.first_name, dataset1.eid,dataset2.eid 
FROM
dataset1 JOIN dataset2
ON
dataset1.first_name = dataset2.first_name;


Bucket-Map join
-----------------------------------------------
If tables being joined are bucketed on the join columns, 
and the number of buckets in one table is a multiple of the number of buckets in the other table, 
the buckets can be joined with each other.

CREATE TABLE IF NOT EXISTS dataset1_bucketed ( eid int,first_name String, 
last_name String, email String, gender String, ip_address String)
clustered by(first_name) into 4 buckets 
row format delimited 
fields terminated BY ',';

CREATE TABLE IF NOT EXISTS dataset2_bucketed (eid int,first_name String, last_name String)
clustered by(first_name) into 8 buckets 
row format delimited 
fields terminated BY ',' ;

insert into dataset1_bucketed select * from dataset1;
insert into dataset2_bucketed select * from dataset2;
	
we have two tables that are bucketed. We can now perform Bucket-map join between these two datasets.
For performing Bucket-Map join, we need to set this property in the Hive shell.

set hive.optimize.bucketmapjoin = true

SELECT /*+ MAPJOIN(dataset2_bucketed) */ dataset1_bucketed.first_name,dataset1_bucketed.eid, dataset2_bucketed.eid 
FROM 
dataset1_bucketed JOIN dataset2_bucketed
ON
dataset1_bucketed.first_name = dataset2_bucketed.first_name ;


Sort Merge Bucket(SMB) Map Join
-------------------------------------------

If the tables being joined are sorted and bucketized on the join columns and have the same number of buckets, 
a sort-merge join can be performed. The corresponding buckets are joined with each other at the mapper.

Here we have 4 buckets for dataset1 and 8 buckets for dataset2. 
Now, we will create another table with 4 buckets for dataset2.

For performing the SMB-Map join, we need to set the following properties:

Set hive.input.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;
set hive.optimize.bucketmapjoin = true;
set hive.optimize.bucketmapjoin.sortedmerge = true;

To perform this join, we need to have the data in the bucketed tables sorted by the join column. 
Now, we will re-insert the data into the bucketed tables by using sorting the records.

insert overwrite table dataset1_bucketed 
select * from dataset1 sort by first_name;

insert overwrite table dataset2_bucketed 
select * from dataset2 sort by first_name;

Now, let us perform the join between tables having 4 buckets and 8 buckets.

SELECT /*+ MAPJOIN(dataset2_bucketed) */ dataset1_bucketed.first_name,dataset1_bucketed.eid, dataset2_bucketed.eid
FROM
dataset1_bucketed JOIN dataset2_bucketed
ON
dataset1_bucketed.first_name = dataset2_bucketed.first_name ;

In the above screenshot, you can see that the query took 23.844 seconds.

To perform SMB-Map join, we need to have the same number of buckets in both the tables with the bucketed column sorted.
Now, we will create another table for dataset2 having 4 buckets and will insert the data that is sorted by first_name.

CREATE TABLE IF NOT EXISTS dataset2_bucketed1 (eid int,first_name String, last_name String)
clustered by(first_name) into 4 buckets 
row format delimited
fields terminated BY ',' ;

insert overwrite table dataset2_bucketed1 select * from dataset2 sort by first_name;

Now, we have two tables with 4 buckets and the joined column sorted. Let us perform the join query again.

SELECT /*+ MAPJOIN(dataset2_sbucketed1) */ dataset1_bucketed.first_name, dataset1_bucketed.eid, dataset2_bucketed1.eid
FROM 
dataset1_bucketed JOIN dataset2_bucketed1
ON
dataset1_bucketed.first_name = dataset2_bucketed1.first_name ;
































